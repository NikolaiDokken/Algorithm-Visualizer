{"version":3,"sources":["PathfinderVisualizer/Node/Node.jsx","algorithms/dijkstraAndAstar.js","PathfinderVisualizer/PathfinderVisualizer.jsx","Components/DropDownButton.jsx","Components/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","finishNode","aStar","sort","n1","n2","distance","estimatedDistanceToFinish","startNode","startRow","startCol","finishRow","finishCol","Math","sqrt","pow","updateUnvisitedNeigbours","node","grid","unvisitedNeighbours","neighbours","push","length","filter","neighbour","isVisited","getUnvisitedNeighbours","previousNode","PathfinderVisualizer","mouseIsPressed","getInitialGrid","setState","clearGrid","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","nodes","rows","cols","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","window","location","reload","map","rowIndex","key","nodeIndex","handleMouseDown","handleMousEnter","handleMouseUp","currentRow","createNode","slice","newNode","options","DropDownButton","React","useState","open","setOpen","anchorRef","useRef","selectedIndex","setSelectedIndex","handleClose","event","current","contains","target","Grid","container","direction","alignItems","item","xs","ButtonGroup","variant","color","ref","aria-label","Button","console","info","size","aria-controls","undefined","aria-expanded","aria-haspopup","prevOpen","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","style","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","option","index","MenuItem","disabled","selected","handleMenuItemClick","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","NavBar","classes","AppBar","position","Toolbar","IconButton","edge","Typography","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.274a08a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}\n      ></div>\n    );\n  }\n}\n","// algorithm for Dijkstra and A*\n// Takes a boolean aStar and uses distace to finish\n// if aStar is true\nexport function dijkstra(grid, startNode, finishNode, aStar) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes, finishNode, aStar);\n    const closestNode = unvisitedNodes.shift();\n    // If node is wall, we skip it\n    if (closestNode.isWall) continue;\n    // If closestNode has a distance of infinity,\n    // we must be trapped, and have to stop\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeigbours(closestNode, grid);\n  }\n}\n\n// Extracts all nodes from a grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (let rows = 0; rows < grid.length; rows++) {\n    for (let cols = 0; cols < grid[rows].length; cols++) {\n      nodes.push(grid[rows][cols]);\n    }\n  }\n  return nodes;\n}\n\n// Sorts unvisited nodes so that\n// first node in array is closest to startNode\n// or closest to startNode and finishNode if\n// we are using A* algorithm\nfunction sortNodesByDistance(unvisitedNodes, finishNode, aStar) {\n  unvisitedNodes.sort(\n    (n1, n2) =>\n      n1.distance +\n      (aStar ? estimatedDistanceToFinish(n1, finishNode) : 0) -\n      (n2.distance + (aStar ? estimatedDistanceToFinish(n2, finishNode) : 0))\n  );\n}\n\nfunction estimatedDistanceToFinish(startNode, finishNode) {\n  const startRow = startNode.row;\n  const startCol = startNode.col;\n  const finishRow = finishNode.row;\n  const finishCol = finishNode.col;\n  return Math.sqrt(\n    Math.pow(finishRow - startRow, 2) + Math.pow(finishCol - startCol, 2)\n  );\n}\n\nfunction updateUnvisitedNeigbours(node, grid) {\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (const neighbour of unvisitedNeighbours) {\n    neighbour.distance = node.distance + 1;\n    neighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col < grid[row].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder\n} from \"../algorithms/dijkstraAndAstar\";\n\nimport \"./PathfinderVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfinderVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  clearGrid() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  componentDidMount() {\n    this.clearGrid();\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMousEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra(aStar) {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode, aStar);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <div>\n        <button onClick={() => this.visualizeDijkstra(false)}>\n          Visualize Dijkstra!\n        </button>\n        <button onClick={() => this.visualizeDijkstra(true)}>\n          Visualize A*!\n        </button>\n        <button onClick={() => window.location.reload()}>Clear board</button>\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex} className=\"grid-row\">\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMousEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\n\nconst options = [\"A*\", \"Dijkstra\"];\n\nexport default function DropDownButton() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n  const handleClick = () => {\n    console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <Grid container direction=\"column\" alignItems=\"center\">\n      <Grid item xs={12}>\n        <ButtonGroup\n          variant=\"contained\"\n          color=\"primary\"\n          ref={anchorRef}\n          aria-label=\"split button\"\n        >\n          <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n          <Button\n            color=\"primary\"\n            size=\"small\"\n            aria-controls={open ? \"split-button-menu\" : undefined}\n            aria-expanded={open ? \"true\" : undefined}\n            aria-label=\"select merge strategy\"\n            aria-haspopup=\"menu\"\n            onClick={handleToggle}\n          >\n            <ArrowDropDownIcon />\n          </Button>\n        </ButtonGroup>\n        <Popper\n          open={open}\n          anchorEl={anchorRef.current}\n          role={undefined}\n          transition\n          disablePortal\n        >\n          {({ TransitionProps, placement }) => (\n            <Grow\n              {...TransitionProps}\n              style={{\n                transformOrigin:\n                  placement === \"bottom\" ? \"center top\" : \"center bottom\"\n              }}\n            >\n              <Paper>\n                <ClickAwayListener onClickAway={handleClose}>\n                  <MenuList id=\"split-button-menu\">\n                    {options.map((option, index) => (\n                      <MenuItem\n                        key={option}\n                        disabled={index === 2}\n                        selected={index === selectedIndex}\n                        onClick={event => handleMenuItemClick(event, index)}\n                      >\n                        {option}\n                      </MenuItem>\n                    ))}\n                  </MenuList>\n                </ClickAwayListener>\n              </Paper>\n            </Grow>\n          )}\n        </Popper>\n      </Grid>\n    </Grid>\n  );\n}\n","import AppBar from \"@material-ui/core/AppBar\";\nimport React, { Component } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Button } from \"@material-ui/core\";\nimport DropDownButton from \"./DropDownButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h7\" color=\"inherit\">\n            Algorithm Visualizer\n          </Typography>\n          <DropDownButton />\n          <Button></Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\nimport NavBar from \"./Components/NavBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar></NavBar>\n\n      <PathfinderVisualizer></PathfinderVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}