{"version":3,"sources":["PathfinderVisualizer/Node/Node.jsx","algorithms/dijkstraAndAstar.js","Components/Navbar/DropDownButton.jsx","Components/Navbar/Navbar.jsx","PathfinderVisualizer/PathfinderVisualizer.jsx","App.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","finishNode","aStar","sort","n1","n2","distance","estimatedDistanceToFinish","startNode","startRow","startCol","finishRow","finishCol","Math","sqrt","pow","updateUnvisitedNeigbours","node","grid","unvisitedNeighbours","neighbours","push","length","filter","neighbour","isVisited","getUnvisitedNeighbours","previousNode","options","DropDownButton","React","useState","open","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","style","zIndex","Grid","container","direction","alignItems","item","xs","ButtonGroup","variant","color","ref","aria-label","Button","background","currentIndex","size","aria-controls","undefined","aria-expanded","aria-haspopup","onClick","Popper","anchorEl","role","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","map","option","index","MenuItem","key","selected","setCurrentIndex","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","Navbar","classes","AppBar","position","Toolbar","Hidden","smDown","Typography","width","justify","endIcon","margin","visualizeFunction","clearGrid","disableElevation","elevation","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","gutterBottom","DialogActions","autoFocus","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfinderVisualizer","mouseIsPressed","startIsPressed","finishIsPressed","visualizeDijkstra","bind","getInitialGrid","setState","setTimeout","document","getElementById","newGrid","getNewGridWithWallToggled","getNewGridWithUpdatedStartFinish","visitedNodesInOrder","nodesInShortestPathOrder","i","animateShortestPath","nodes","rows","cols","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","rowIndex","padding","nodeIndex","handleMouseDown","handleMousEnter","handleMouseUp","currentRow","createNode","isWallBool","slice","newNode","currentGrid","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.b916bd90.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}\n      ></div>\n    );\n  }\n}\n","// algorithm for Dijkstra and A*\n// Takes a boolean aStar and uses distace to finish\n// if aStar is true\nexport function dijkstra(grid, startNode, finishNode, aStar) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes, finishNode, aStar);\n    const closestNode = unvisitedNodes.shift();\n    // If node is wall, we skip it\n    if (closestNode.isWall) continue;\n    // If closestNode has a distance of infinity,\n    // we must be trapped, and have to stop\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeigbours(closestNode, grid);\n  }\n}\n\n// Extracts all nodes from a grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (let rows = 0; rows < grid.length; rows++) {\n    for (let cols = 0; cols < grid[rows].length; cols++) {\n      nodes.push(grid[rows][cols]);\n    }\n  }\n  return nodes;\n}\n\n// Sorts unvisited nodes so that\n// first node in array is closest to startNode\n// or closest to startNode and finishNode if\n// we are using A* algorithm\nfunction sortNodesByDistance(unvisitedNodes, finishNode, aStar) {\n  unvisitedNodes.sort(\n    (n1, n2) =>\n      n1.distance +\n      (aStar ? estimatedDistanceToFinish(n1, finishNode) : 0) -\n      (n2.distance + (aStar ? estimatedDistanceToFinish(n2, finishNode) : 0))\n  );\n}\n\nfunction estimatedDistanceToFinish(startNode, finishNode) {\n  const startRow = startNode.row;\n  const startCol = startNode.col;\n  const finishRow = finishNode.row;\n  const finishCol = finishNode.col;\n  return Math.sqrt(\n    Math.pow(finishRow - startRow, 2) + Math.pow(finishCol - startCol, 2)\n  );\n}\n\nfunction updateUnvisitedNeigbours(node, grid) {\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (const neighbour of unvisitedNeighbours) {\n    neighbour.distance = node.distance + 1;\n    neighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col < grid[row].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\n\nconst options = [\"Select an algorithm\", \"A*\", \"Dijkstra\"];\n\nexport default function DropDownButton(props) {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div style={{ zIndex: \"5000\" }}>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <ButtonGroup\n            variant=\"contained\"\n            color=\"primary\"\n            ref={anchorRef}\n            aria-label=\"split button\"\n          >\n            <Button style={{ background: \"#0328fc\" }}>\n              {options[props.currentIndex]}\n            </Button>\n            <Button\n              style={{ background: \"#0328fc\" }}\n              size=\"small\"\n              aria-controls={open ? \"split-button-menu\" : undefined}\n              aria-expanded={open ? \"true\" : undefined}\n              aria-label=\"select merge strategy\"\n              aria-haspopup=\"menu\"\n              onClick={handleToggle}\n            >\n              <ArrowDropDownIcon />\n            </Button>\n          </ButtonGroup>\n          <Popper\n            open={open}\n            anchorEl={anchorRef.current}\n            role={undefined}\n            transition\n            disablePortal\n          >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin:\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\"\n                }}\n              >\n                <Paper className=\"dropdown\">\n                  <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList id=\"split-button-menu\">\n                      {options.map((option, index) => (\n                        <MenuItem\n                          key={index}\n                          selected={index === props.currentIndex}\n                          onClick={event => {\n                            props.setCurrentIndex(index);\n                            setOpen(false);\n                          }}\n                        >\n                          {option}\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import AppBar from \"@material-ui/core/AppBar\";\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  Hidden\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\n\nimport DropDownButton from \"./DropDownButton\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nexport default function Navbar(props) {\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  function handleClose() {\n    setOpen(false);\n  }\n  function handleClickOpen() {\n    setOpen(true);\n  }\n\n  const handleRun = () => {\n    if (currentIndex === 0) {\n      return null;\n    } else if (currentIndex === 1) {\n      props.visualizeFunction(true);\n    } else if (currentIndex === 2) {\n      props.visualizeFunction(false);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: \"#000\" }}>\n        <Toolbar>\n          <Hidden smDown>\n            <Typography color=\"inherit\" style={{ width: \"280px\" }}>\n              Shortest path Algorithm Visualizer\n            </Typography>\n          </Hidden>\n          <Grid container justify=\"center\">\n            <DropDownButton\n              currentIndex={currentIndex}\n              setCurrentIndex={setCurrentIndex}\n            />\n            <Button\n              variant=\"contained\"\n              endIcon={<PlayArrowIcon />}\n              style={{ background: \"limegreen\", margin: \"0 10px 0 10px\" }}\n              onClick={handleRun}\n            >\n              Run\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              endIcon={<DeleteIcon />}\n              onClick={() => props.clearGrid()}\n              disableElevation\n              elevation={0}\n            >\n              Clear Board\n            </Button>\n          </Grid>\n          <div>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={handleClickOpen}\n            >\n              Instructions\n            </Button>\n            <Dialog\n              onClose={handleClose}\n              aria-labelledby=\"customized-dialog-title\"\n              open={open}\n            >\n              <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                Instructions\n              </DialogTitle>\n              <DialogContent dividers>\n                <Typography gutterBottom>\n                  1. Pick an algorithm{\" \"}\n                  <font color=\"#0328fc\">(Blue button)</font>\n                  <br /> 2. (Optional) Draw walls by dragging/clicking squares.\n                  <br /> 3. (Optional) Move start/end node by dragging them to\n                  another square.\n                  <br /> 4. Run the algorithm{\" \"}\n                  <font color=\"limegreen\">(Green button)</font>\n                  <br /> 5. Clear the board to go again. Start/end node will\n                  remain at same place <font color=\"red\">(Red button)</font>\n                  <br />\n                  <br />\n                  Drawing walls by dragging on mobile is currently not possible,\n                  I am working on fixing this!\n                </Typography>\n              </DialogContent>\n              <DialogActions>\n                <Button autoFocus onClick={handleClose} color=\"primary\">\n                  Ok\n                </Button>\n              </DialogActions>\n            </Dialog>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder\n} from \"../algorithms/dijkstraAndAstar\";\nimport Navbar from \"../Components/Navbar/Navbar\";\n\nimport \"./PathfinderVisualizer.css\";\n\nlet START_NODE_ROW = 10;\nlet START_NODE_COL = 15;\nlet FINISH_NODE_ROW = 10;\nlet FINISH_NODE_COL = 35;\n\nexport default class PathfinderVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startIsPressed: false,\n      finishIsPressed: false\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    this.clearGrid = this.clearGrid.bind(this);\n  }\n\n  clearGrid() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n    setTimeout(() => {\n      grid.map(row =>\n        row.map(node => {\n          const extraClassName = node.isFinish\n            ? \"node-finish\"\n            : node.isStart\n            ? \"node-start\"\n            : node.isWall\n            ? \"node-wall\"\n            : \"\";\n          document.getElementById(\n            `node-${node.row}-${node.col}`\n          ).className = `node ${extraClassName}`;\n          return null;\n        })\n      );\n    }, 0);\n  }\n\n  componentDidMount() {\n    this.clearGrid();\n  }\n\n  handleMouseDown(row, col) {\n    if (row === START_NODE_ROW && col === START_NODE_COL) {\n      this.setState({ startIsPressed: true });\n    } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n      this.setState({ finishIsPressed: true });\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMousEnter(row, col) {\n    if (this.state.startIsPressed) {\n      START_NODE_ROW = row;\n      START_NODE_COL = col;\n      const newGrid = getNewGridWithUpdatedStartFinish(this.state.grid);\n      this.setState({ grid: newGrid });\n    } else if (this.state.finishIsPressed) {\n      FINISH_NODE_ROW = row;\n      FINISH_NODE_COL = col;\n      const newGrid = getNewGridWithUpdatedStartFinish(this.state.grid);\n      this.setState({ grid: newGrid });\n    } else {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n    this.setState({ startIsPressed: false });\n    this.setState({ finishIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra(aStar) {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode, aStar);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <div>\n        <Navbar\n          visualizeFunction={this.visualizeDijkstra}\n          clearGrid={this.clearGrid}\n        />\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div\n                key={rowIndex}\n                className=\"grid-row\"\n                style={{ margin: \"0\", padding: \"0\" }}\n              >\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMousEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      style={{ margin: \"0\" }}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col, false));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col, isWallBool) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isWall: isWallBool,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithUpdatedStartFinish = currentGrid => {\n  const newGrid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col, currentGrid[row][col].isWall));\n    }\n    newGrid.push(currentRow);\n  }\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfinderVisualizer></PathfinderVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}