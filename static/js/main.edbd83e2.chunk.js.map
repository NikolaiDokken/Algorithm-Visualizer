{"version":3,"sources":["PathfinderVisualizer/Node/Node.jsx","algorithms/dijkstraAndAstar.js","Components/Navbar/DropDownButton.jsx","Components/Navbar/Navbar.jsx","PathfinderVisualizer/PathfinderVisualizer.jsx","App.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","finishNode","aStar","sort","n1","n2","distance","estimatedDistanceToFinish","startNode","startRow","startCol","finishRow","finishCol","Math","sqrt","pow","updateUnvisitedNeigbours","node","grid","unvisitedNeighbours","neighbours","push","length","filter","neighbour","isVisited","getUnvisitedNeighbours","previousNode","options","DropDownButton","React","useState","open","setOpen","anchorRef","useRef","handleClose","event","current","contains","target","Grid","container","direction","alignItems","item","xs","ButtonGroup","ref","Button","variant","style","borderColor","color","currentIndex","size","onClick","Popper","anchorEl","role","undefined","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","map","option","index","MenuItem","key","selected","setCurrentIndex","bodyScrollLock","require","enableBodyScroll","disableBodyScroll","useStyles","makeStyles","theme","root","flexGrow","padding","menuButton","marginRight","spacing","Navbar","classes","targetElement","document","querySelector","handleRun","visualizeFunction","AppBar","position","background","Toolbar","Hidden","smDown","Typography","zIndex","window","innerWidth","endIcon","elevation","disableElevation","IconButton","borderRadius","margin","clearGrid","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","gutterBottom","DialogActions","autoFocus","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","prevX","prevY","PathfinderVisualizer","mouseIsPressed","startIsPressed","finishIsPressed","visualizeDijkstra","bind","touchHandler","init","handleMouseDown","first","changedTouches","type","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","clientY","elementFromPoint","split","handleMousEnter","parseInt","handleMouseUp","newGrid","getNewGridWithUpdatedStartFinish","setState","dispatchEvent","preventDefault","addEventListener","initialLoad","getInitialGrid","setTimeout","getElementById","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","i","animateShortestPath","nodes","rows","cols","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","rowIndex","nodeIndex","initalLoad","amtCols","floor","squareWidth","amtRows","innerHeight","currentRow","createNode","isWallBool","slice","newNode","currentGrid","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.edbd83e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`noselect node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}\n      ></div>\n    );\n  }\n}\n","// algorithm for Dijkstra and A*\n// Takes a boolean aStar and uses distace to finish\n// if aStar is true\nexport function dijkstra(grid, startNode, finishNode, aStar) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes, finishNode, aStar);\n    const closestNode = unvisitedNodes.shift();\n    // If node is wall, we skip it\n    if (closestNode.isWall) continue;\n    // If closestNode has a distance of infinity,\n    // we must be trapped, and have to stop\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeigbours(closestNode, grid);\n  }\n}\n\n// Extracts all nodes from a grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (let rows = 0; rows < grid.length; rows++) {\n    for (let cols = 0; cols < grid[rows].length; cols++) {\n      nodes.push(grid[rows][cols]);\n    }\n  }\n  return nodes;\n}\n\n// Sorts unvisited nodes so that\n// first node in array is closest to startNode\n// or closest to startNode and finishNode if\n// we are using A* algorithm\nfunction sortNodesByDistance(unvisitedNodes, finishNode, aStar) {\n  unvisitedNodes.sort(\n    (n1, n2) =>\n      n1.distance +\n      (aStar ? estimatedDistanceToFinish(n1, finishNode) : 0) -\n      (n2.distance + (aStar ? estimatedDistanceToFinish(n2, finishNode) : 0))\n  );\n}\n\nfunction estimatedDistanceToFinish(startNode, finishNode) {\n  const startRow = startNode.row;\n  const startCol = startNode.col;\n  const finishRow = finishNode.row;\n  const finishCol = finishNode.col;\n  return Math.sqrt(\n    Math.pow(finishRow - startRow, 2) + Math.pow(finishCol - startCol, 2)\n  );\n}\n\nfunction updateUnvisitedNeigbours(node, grid) {\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (const neighbour of unvisitedNeighbours) {\n    neighbour.distance = node.distance + 1;\n    neighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col < grid[row].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\n\nconst options = [\"Algorithm\", \"A*\", \"Dijkstra\"];\n\nexport default function DropDownButton(props) {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n\n  const handleClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Grid container direction=\"column\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <ButtonGroup ref={anchorRef}>\n            <Button\n              variant=\"outlined\"\n              style={{\n                borderColor: \"white\",\n                color: \"white\"\n              }}\n            >\n              {options[props.currentIndex]}\n            </Button>\n            <Button\n              variant=\"outlined\"\n              style={{ borderColor: \"white\", color: \"white\" }}\n              size=\"small\"\n              onClick={handleToggle}\n            >\n              <ArrowDropDownIcon />\n            </Button>\n          </ButtonGroup>\n          <Popper\n            open={open}\n            anchorEl={anchorRef.current}\n            role={undefined}\n            transition\n            disablePortal\n          >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin:\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\"\n                }}\n              >\n                <Paper className=\"dropdown\">\n                  <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList id=\"split-button-menu\">\n                      {options.map((option, index) => (\n                        <MenuItem\n                          key={index}\n                          selected={index === props.currentIndex}\n                          onClick={event => {\n                            props.setCurrentIndex(index);\n                            setOpen(false);\n                          }}\n                        >\n                          {option}\n                        </MenuItem>\n                      ))}\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","import AppBar from \"@material-ui/core/AppBar\";\nimport React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  Hidden,\n  IconButton\n} from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\n\nimport DropDownButton from \"./DropDownButton\";\nconst bodyScrollLock = require(\"body-scroll-lock\");\nconst enableBodyScroll = bodyScrollLock.enableBodyScroll;\nconst disableBodyScroll = bodyScrollLock.disableBodyScroll;\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    padding: 0\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nexport default function Navbar(props) {\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  function handleClose() {\n    setOpen(false);\n    const targetElement = document.querySelector(\"#root\");\n    disableBodyScroll(targetElement);\n  }\n  function handleClickOpen() {\n    const targetElement = document.querySelector(\"#root\");\n    enableBodyScroll(targetElement);\n    setOpen(true);\n  }\n\n  const handleRun = () => {\n    if (currentIndex === 0) {\n      return null;\n    } else if (currentIndex === 1) {\n      props.visualizeFunction(true);\n    } else if (currentIndex === 2) {\n      props.visualizeFunction(false);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" style={{ background: \"#313131\" }}>\n        <Toolbar>\n          <Grid container direction=\"row\">\n            <Grid item xs>\n              <Hidden smDown>\n                <Typography color=\"inherit\">\n                  Shortest path Algorithm Visualizer\n                </Typography>\n              </Hidden>\n            </Grid>\n            <Grid item xs style={{ zIndex: \"5000\" }}>\n              <DropDownButton\n                currentIndex={currentIndex}\n                setCurrentIndex={setCurrentIndex}\n              />\n            </Grid>\n            <Grid item xs>\n              {window.innerWidth >= 680 ? (\n                <Button\n                  variant=\"contained\"\n                  endIcon={<PlayArrowIcon />}\n                  style={{ background: \"limegreen\" }}\n                  onClick={handleRun}\n                  elevation={0}\n                  disableElevation\n                >\n                  Run\n                </Button>\n              ) : (\n                <IconButton\n                  onClick={handleRun}\n                  style={{\n                    color: \"limegreen\",\n                    borderRadius: \"100%\",\n                    padding: \"4px\",\n                    margin: \"0 10px 0 10px\"\n                  }}\n                >\n                  <PlayArrowIcon />\n                </IconButton>\n              )}\n            </Grid>\n            <Grid item xs>\n              {window.innerWidth >= 680 ? (\n                <Button\n                  variant=\"contained\"\n                  color=\"secondary\"\n                  endIcon={<DeleteIcon />}\n                  onClick={() => props.clearGrid(false)}\n                  disableElevation\n                  elevation={0}\n                >\n                  Clear Board\n                </Button>\n              ) : (\n                <IconButton\n                  onClick={() => props.clearGrid(false)}\n                  color=\"secondary\"\n                  style={{\n                    borderRadius: \"100%\",\n                    padding: \"4px\",\n                    margin: \"0 10px 0 10px\"\n                  }}\n                >\n                  <DeleteIcon />\n                </IconButton>\n              )}\n            </Grid>\n            <Grid item xs>\n              <div id=\"dialogwindow\">\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={handleClickOpen}\n                >\n                  Help\n                </Button>\n                <Dialog\n                  onClose={handleClose}\n                  aria-labelledby=\"customized-dialog-title\"\n                  open={open}\n                >\n                  <DialogTitle\n                    id=\"customized-dialog-title\"\n                    onClose={handleClose}\n                  >\n                    Instructions\n                  </DialogTitle>\n                  <DialogContent dividers>\n                    <Typography gutterBottom>\n                      1. Pick an algorithm{\" \"}\n                      <font color=\"#fff\" style={{ background: \"black\" }}>\n                        (White button)\n                      </font>\n                      <br /> 2. (Optional) Draw walls by dragging/clicking\n                      squares.\n                      <br /> 3. (Optional) Move start/end node by dragging them\n                      to another square.\n                      <br /> 4. Run the algorithm{\" \"}\n                      <font color=\"limegreen\">(Green button)</font>\n                      <br /> 5. Clear the board to go again.\n                      <font color=\"red\">(Red button).</font> Start/end node will\n                      remain at same place\n                      <br />\n                      <br />\n                      Mobile users: View the page in landscape mode to get a\n                      bigger grid.\n                      <br />\n                      Drawing walls by dragging on mobile is currently not\n                      possible, I am working on fixing this!\n                    </Typography>\n                  </DialogContent>\n                  <DialogActions>\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\n                      Ok\n                    </Button>\n                  </DialogActions>\n                </Dialog>\n              </div>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder\n} from \"../algorithms/dijkstraAndAstar\";\nimport Navbar from \"../Components/Navbar/Navbar\";\n\nimport \"./PathfinderVisualizer.css\";\n\nlet START_NODE_ROW = 10;\nlet START_NODE_COL = 15;\nlet FINISH_NODE_ROW = 10;\nlet FINISH_NODE_COL = 35;\nlet prevX = 0,\n  prevY = 0;\n\nexport default class PathfinderVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      startIsPressed: false,\n      finishIsPressed: false\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    this.clearGrid = this.clearGrid.bind(this);\n    this.touchHandler = this.touchHandler.bind(this);\n    this.init = this.init.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n  }\n\n  touchHandler(event) {\n    var touches = event.changedTouches,\n      first = touches[0],\n      type = \"\";\n    switch (event.type) {\n      case \"touchstart\":\n        type = \"mousedown\";\n        break;\n      case \"touchmove\":\n        type = \"mousemove\";\n        break;\n      case \"touchend\":\n        type = \"mouseup\";\n        break;\n      default:\n        return;\n    }\n    var simulatedEvent = document.createEvent(\"MouseEvent\");\n    simulatedEvent.initMouseEvent(\n      type,\n      true,\n      true,\n      window,\n      1,\n      first.screenX,\n      first.screenY,\n      first.clientX,\n      first.clientY,\n      false,\n      false,\n      false,\n      false,\n      0 /*left*/,\n      null\n    );\n    const node = document\n      .elementFromPoint(first.clientX, first.clientY)\n      .id.split(\"-\");\n\n    if (node[1] !== undefined && node[2] !== undefined) {\n      if (event.type === \"touchstart\") {\n        this.handleMouseDown(node[1], node[2]);\n      }\n      if (node[1] !== prevX || node[2] !== prevY) {\n        this.handleMousEnter(parseInt(node[1]), parseInt(node[2]));\n      }\n    }\n    if (event.type === \"touchend\") {\n      prevX = 0;\n      prevY = 0;\n      this.handleMouseUp();\n      const newGrid = getNewGridWithUpdatedStartFinish(this.state.grid);\n      this.setState({ grid: newGrid });\n    }\n    first.target.dispatchEvent(simulatedEvent);\n    if (event.type !== \"touchend\") {\n      prevX = node[1];\n      prevY = node[2];\n    }\n    event.preventDefault();\n  }\n\n  init() {\n    const targetElement = document.querySelector(\"#grid\");\n    targetElement.addEventListener(\"touchstart\", this.touchHandler, true);\n    targetElement.addEventListener(\"touchmove\", this.touchHandler, true);\n    targetElement.addEventListener(\"touchend\", this.touchHandler, true);\n    targetElement.addEventListener(\"touchcancel\", this.touchHandler, true);\n  }\n\n  clearGrid(initialLoad) {\n    const grid = getInitialGrid(initialLoad);\n    this.setState({ grid });\n    setTimeout(() => {\n      grid.map(row =>\n        row.map(node => {\n          const extraClassName = node.isFinish\n            ? \"node-finish\"\n            : node.isStart\n            ? \"node-start\"\n            : node.isWall\n            ? \"node-wall\"\n            : \"\";\n          document.getElementById(\n            `node-${node.row}-${node.col}`\n          ).className = `node ${extraClassName}`;\n          return null;\n        })\n      );\n    }, 0);\n  }\n\n  componentDidMount() {\n    this.init();\n    this.clearGrid(true);\n  }\n\n  handleMouseDown(row, col) {\n    if (row === START_NODE_ROW && col === START_NODE_COL) {\n      this.setState({ startIsPressed: true });\n    } else if (row === FINISH_NODE_ROW && col === FINISH_NODE_COL) {\n      this.setState({ finishIsPressed: true });\n    } else {\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid, mouseIsPressed: true });\n    }\n  }\n\n  handleMousEnter(row, col) {\n    if (this.state.startIsPressed) {\n      START_NODE_ROW = row;\n      START_NODE_COL = col;\n      const newGrid = getNewGridWithUpdatedStartFinish(this.state.grid);\n      this.setState({ grid: newGrid });\n    } else if (this.state.finishIsPressed) {\n      FINISH_NODE_ROW = row;\n      FINISH_NODE_COL = col;\n      const newGrid = getNewGridWithUpdatedStartFinish(this.state.grid);\n      this.setState({ grid: newGrid });\n    } else {\n      if (!this.state.mouseIsPressed) return;\n      const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n    this.setState({ startIsPressed: false });\n    this.setState({ finishIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra(aStar) {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode, aStar);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <div>\n        <Navbar\n          visualizeFunction={this.visualizeDijkstra}\n          clearGrid={this.clearGrid}\n        />\n        <div className=\"grid\" id=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex} className=\"grid-row\">\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMousEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      style={{ margin: \"0\" }}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = initalLoad => {\n  const grid = [];\n  let amtCols = Math.floor(window.innerWidth / 38);\n  const squareWidth = Math.floor(window.innerWidth / amtCols);\n  let amtRows = Math.floor((window.innerHeight - 80) / squareWidth);\n  if (initalLoad) {\n    START_NODE_COL = Math.floor(amtCols / 3) - 1;\n    START_NODE_ROW = Math.floor(amtRows / 2);\n    FINISH_NODE_COL = Math.floor((amtCols * 2) / 3) + 1;\n    FINISH_NODE_ROW = Math.floor(amtRows / 2);\n  }\n  for (let row = 0; row < amtRows; row++) {\n    const currentRow = [];\n    for (let col = 0; col < amtCols; col++) {\n      currentRow.push(createNode(row, col, false));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col, isWallBool) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isWall: isWallBool,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithUpdatedStartFinish = currentGrid => {\n  const newGrid = [];\n  let amtCols = Math.floor(window.innerWidth / 38);\n  const squareWidth = Math.floor(window.innerWidth / amtCols);\n  let amtRows = Math.floor((window.innerHeight - 80) / squareWidth);\n\n  for (let row = 0; row < amtRows; row++) {\n    const currentRow = [];\n    for (let col = 0; col < amtCols; col++) {\n      currentRow.push(createNode(row, col, currentGrid[row][col].isWall));\n    }\n    newGrid.push(currentRow);\n  }\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfinderVisualizer></PathfinderVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nconst bodyScrollLock = require(\"body-scroll-lock\");\nconst disableBodyScroll = bodyScrollLock.disableBodyScroll;\nconst targetElement = document.querySelector(\"#root\");\ndisableBodyScroll(targetElement);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}