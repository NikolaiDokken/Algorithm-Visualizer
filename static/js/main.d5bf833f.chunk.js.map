{"version":3,"sources":["PathfinderVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfinderVisualizer/PathfinderVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","n1","n2","distance","updateUnvisitedNeigbours","node","grid","unvisitedNeighbours","neighbours","push","length","filter","neighbour","isVisited","getUnvisitedNeighbours","previousNode","PathfinderVisualizer","mouseIsPressed","getInitialGrid","setState","clearGrid","newGrid","getNewGridWithWallToggled","visitedNodesInOrder","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","startNode","finishNode","nodes","rows","cols","getAllNodes","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","window","location","reload","map","rowIndex","key","nodeIndex","handleMouseDown","handleMousEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5bf833f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp(row, col)}\n      ></div>\n    );\n  }\n}\n","export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If node is wall, we skip it\n    if (closestNode.isWall) continue;\n    // If closestNode has a distance of infinity,\n    // we must be trapped, and have to stop\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeigbours(closestNode, grid);\n  }\n}\n\n// Extracts all nodes from a grid\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (let rows = 0; rows < grid.length; rows++) {\n    for (let cols = 0; cols < grid[rows].length; cols++) {\n      nodes.push(grid[rows][cols]);\n    }\n  }\n  return nodes;\n}\n\n// Sorts unvisited nodes so that\n// first node in array is closest to startNode\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((n1, n2) => n1.distance - n2.distance);\n}\n\nfunction updateUnvisitedNeigbours(node, grid) {\n  const unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\n  for (const neighbour of unvisitedNeighbours) {\n    neighbour.distance = node.distance + 1;\n    neighbour.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const { row, col } = node;\n\n  if (row > 0) neighbours.push(grid[row - 1][col]);\n  if (col > 0) neighbours.push(grid[row][col - 1]);\n  if (row < grid.length - 1) neighbours.push(grid[row + 1][col]);\n  if (col < grid[row].length - 1) neighbours.push(grid[row][col + 1]);\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n}\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../algorithms/dijkstra\";\n\nimport \"./PathfinderVisualizer.css\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfinderVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  clearGrid() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  componentDidMount() {\n    this.clearGrid();\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMousEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n    return (\n      <div>\n        <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra!\n        </button>\n        <button onClick={() => window.location.reload()}>Clear board</button>\n        <div className=\"grid\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div key={rowIndex} className=\"grid-row\">\n                {row.map((node, nodeIndex) => {\n                  const { row, col, isStart, isFinish, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIndex}\n                      col={col}\n                      row={row}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMousEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfinderVisualizer></PathfinderVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}